#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from __future__ import annotations

import argparse
import logging
import subprocess
import sys
import threading
from typing import Optional, Tuple

from ip import IP


def create_arg_parser() -> argparse:
    """
    Metodo para establecer los argumentos que necesita la clasek
    :return:
    """
    example = "python3 %(prog)s -ip 127.0.0.1"

    my_parser = argparse.ArgumentParser(description='%(prog)s a is a script for run nmap scanner',
                                        usage='{}'.format(example))

    requiered = my_parser.add_argument_group('requiered arguments')
    requiered.add_argument('-i', '--ip', help='IP address.')

    my_parser.add_argument('-a', '--advanced', action='store_true', help='Scan advanced (boolean).', default=False)
    my_parser.add_argument('-v', '--verbose', action='store_true', help='Verbose flag (boolean).', default=False)

    if len(sys.argv) == 1:
        my_parser.print_help()
        sys.exit(1)
    return my_parser.parse_args()


def format_text(param_text: bytes) -> Optional[str]:
    if param_text is not None:
        text = param_text.decode('utf-8')
        return str(text)
        # return text.replace('\n', '')
    return param_text


def execute_command(command: str) -> Tuple[str, str, subprocess.Popen]:
    execute = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = execute.communicate()
    return format_text(stdout), format_text(stderr), execute


def thread_nmap_simple(ip: IP):
    """
    -sS Sondeo con TCP SYN
    -sC
    -sV Deteccion de versiones de servicios
    -O: Deteccion de SO
    -oX
    :param ip:
    :return:
    """
    logging.debug(f"Thread nmap simple: starting")
    command: str = f'nmap -sS -sC -sV -O -oX "{ip.ip}_simple.xml" {ip.ip} > "{ip.ip}_simple.txt"'
    logging.info(command)
    stdout, stderr, execute = execute_command(command)
    if len(stderr) > 0:
        logging.error(stderr)
    logging.debug(f"Thread nmap simple: finishing")


def thread_nmap_advanced(ip: IP):
    """
    -sS Sondeo con TCP SYN
    -sU Escaneo UDP
    -T4
    -A Escaneo agresivo
    -v Modo verbose
    -PE Envio de mensajes ICMP
    -PS80,443 Ping TCP SYN
    -PA3389 Ping TCP ACK
    -PU40125 Ping UDP para descubrir servicios
    -PY
    -g 53 Envia paquetes usando el puerto 53
    :param ip:
    :return:
    """
    logging.debug(f"Thread nmap advanced: starting")
    command: str = f'nmap -sS -sU -T4 -A -v -PE -PP -PS80,443 -PA3389 -PU40125 -PY -g 53 ' \
                   f'--script "default or (discovery and safe)" -oX "{ip.ip}_advanced.xml" {ip.ip} > ' \
                   f'"{ip.ip}_advanced.txt"'
    logging.info(command)
    stdout, stderr, execute = execute_command(command)
    if len(stderr) > 0:
        logging.error(stderr)
    logging.debug(f"Thread nmap advanced: finishing")


if __name__ == "__main__":
    format = "%(asctime)s: %(message)s"
    logging.basicConfig(format=format, level=logging.DEBUG, datefmt="%H:%M:%S")

    arg: argparse = create_arg_parser()
    print(arg)
    ip: IP = IP(arg.ip)
    logging.info("Main    : before creating thread")

    simple = threading.Thread(target=thread_nmap_simple, args=(ip,))
    simple.start()

    if arg.advanced:
        advanced = threading.Thread(target=thread_nmap_advanced, args=(ip,))
        advanced.start()

    logging.info("Main    : wait for the threads to finished")
    simple.join()
    if arg.advanced:
        advanced.join()

    logging.info("Main    : all done")
