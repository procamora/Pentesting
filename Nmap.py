#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from __future__ import annotations

import logging
import subprocess
import threading
import time
from typing import Optional, Tuple

from ip import IP


#from logger import logger as logging


def format_text(param_text: bytes) -> Optional[str]:
    if param_text is not None:
        text = param_text.decode('utf-8')
        return str(text)
        # return text.replace('\n', '')
    return param_text


def execute_command(command: str) -> Tuple[str, str, subprocess.Popen]:
    execute = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = execute.communicate()
    return format_text(stdout), format_text(stderr), execute


def thread_nmap_simple(ip: IP):
    """
    -sS
    -sC
    -sV
    -O
    -oX
    :param ip:
    :return:
    """
    logging.debug(f"Thread nmap simple: starting")
    command: str = f'nmap -sS -sC -sV -O -oX "{ip.ip}_simple.xml" {ip.ip} > "{ip.ip}_simple.txt"'
    logging.info(command)
    stdout, stderr, execute = execute_command(command)
    if len(stderr) > 0:
        logging.error(stderr)
    logging.debug(f"Thread nmap simple: finishing")


def thread_nmap_advanced(ip: IP):
    """

    :param ip:
    :return:
    """
    logging.debug(f"Thread nmap advanced: starting")
    command: str = f'nmap -sS -sU -T4 -A -v -PE -PP -PS80,443 -PA3389 -PU40125 -PY -g 53 ' \
                   f'--script "default or (discovery and safe)" -oX "{ip.ip}_advanced.xml" {ip.ip} > ' \
                   f'"{ip.ip}_advanced.txt"'
    logging.info(command)
    stdout, stderr, execute = execute_command(command)
    if len(stderr) > 0:
        logging.error(stderr)
    logging.debug(f"Thread nmap advanced: finishing")


if __name__ == "__main__":
    format = "%(asctime)s: %(message)s"
    logging.basicConfig(format=format, level=logging.DEBUG, datefmt="%H:%M:%S")

    ip: IP = IP('192.168.1.71')
    logging.info("Main    : before creating thread")
    simple = threading.Thread(target=thread_nmap_simple, args=(ip,))
    advanced = threading.Thread(target=thread_nmap_advanced, args=(ip,))
    logging.info("Main    : before running thread")
    simple.start()
    advanced.start()
    logging.info("Main    : wait for the threads to finished")
    simple.join()
    advanced.join()
    logging.info("Main    : all done")
